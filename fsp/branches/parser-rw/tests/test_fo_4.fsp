lj. full.

declare A:type.
declare R:A->A->bool.
declare Eq: A->A->bool.
declare Assym : (forall x, y : A, (R [x] [y]) -> (R [y] [x]) -> (Eq [x] [y])).
declare Trans : (forall x, y, z:A, (R [x] [y]) -> (R [y] [z]) -> (R [x] [z])).
declare f:A->A.
declare Incr : (forall x, y:A, (R [x] [y]) -> (R [f x] [f y])).
declare M:A.
declare Up : (forall x:A, (R [x] [f x]) -> (R [x] [M])).
declare Least : (forall x:A, (forall y:A, (R [y] [f y])->(R [y] [x]))->(R [M] [x])).

theorem tarski_fp : (Eq [M] [f M]).
  cut (R [M] [f M]) th.
  next.
    focus Assym a1; elim [M] ; elim [f M].
    elim ; [axiom a1 | idtac].
    elim ; [idtac | axiom th].
    focus Up th; elim [f M].
    elim ; [idtac | axiom th].
    focus Incr th; elim [M] ; elim [f M].
    elim ; [axiom a1 | axiom th].
  focus Least th; elim [f M].       
  elim ; [idtac | axiom th].
  elim y1 ; elim a2.
  focus Trans th; elim [y1].
  elim [f y1].
  elim [f M].
  elim ; [axiom a2 | idtac].
  elim ; [idtac | axiom th].
  focus Incr th; elim [y1] ; elim [M].
  elim  ; [idtac | axiom th].
  focus Up th; elim [y1].
  elim ; [axiom a2 | axiom th].
qed.

checkout coq.
checkout proof term coq.
checkout natural language.
