
    > Current logic: intuitionistic sequent calculus.
      

    > Current logic: intuitionistic sequent calculus.
      

    > Current logic: minimal intuitionistic sequent calculus.
      

    > N defined.
      

    > O defined.
      

    > S defined.
      

    > Even defined.
      

    > Odd defined.
      

    > Proof term: 
      μthesis:Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O)).<?1||thesis>
      Natural language:
      we need to prove Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O))
        .... (1) <======
      done
      
      1 goal yet to prove!
      
      
       |-----  1
      *:Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O))
      

    > Proof term: 
      μthesis:Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O)).<λEO:Even O.λOS:∀n:N.Even n⇒Odd (S n).λES:∀n:N.Odd n⇒Even (S n).?1.1.1.1||thesis>
      Natural language:
      we need to prove Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O))
        assume Even O (EO)
        assume ∀n:N.Even n⇒Odd (S n) (OS)
        assume ∀n:N.Odd n⇒Even (S n) (ES)
        .... (1.1.1.1) <======
      done
      
      1 goal yet to prove!
      
      
      ES:∀n:N.Odd n⇒Even (S n)
      OS:∀n:N.Even n⇒Odd (S n)
      EO:Even O
       |-----  1.1.1.1
      *:Even (S (S O))
      

    > Proof term: 
      μthesis:Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O)).<λEO:Even O.λOS:∀n:N.Even n⇒Odd (S n).λES:∀n:N.Odd n⇒Even (S n).μth:Even (S (S O)).<ES||S O*?1.1.1.1.2.1>||thesis>
      Natural language:
      we need to prove Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O))
        assume Even O (EO)
        assume ∀n:N.Even n⇒Odd (S n) (OS)
        assume ∀n:N.Odd n⇒Even (S n) (ES)
        we need to prove Even (S (S O))
          by ES
        ...(1.1.1.1.2.1) <======
      done
      
      1 goal yet to prove!
      
      
      *:Odd (S O)⇒Even (S (S O))
      ES:∀n:N.Odd n⇒Even (S n)
      OS:∀n:N.Even n⇒Odd (S n)
      EO:Even O
       |-----  1.1.1.1.2.1
      th:Even (S (S O))
      

    > 2 subgoals generated. 
      
      Proof term: 
      μthesis:Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O)).<λEO:Even O.λOS:∀n:N.Even n⇒Odd (S n).λES:∀n:N.Odd n⇒Even (S n).μth:Even (S (S O)).<ES||S O*?1.1.1.1.2.1.1*?1.1.1.1.2.1.2>||thesis>
      Natural language:
      we need to prove Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O))
        assume Even O (EO)
        assume ∀n:N.Even n⇒Odd (S n) (OS)
        assume ∀n:N.Odd n⇒Even (S n) (ES)
        we need to prove Even (S (S O))
          by ES
          and .... (1.1.1.1.2.1.1) <======
        ...(1.1.1.1.2.1.2)
      done
      
      2 goals yet to prove!
      
      
      ES:∀n:N.Odd n⇒Even (S n)
      OS:∀n:N.Even n⇒Odd (S n)
      EO:Even O
       |-----  1.1.1.1.2.1.1
      *:Odd (S O)
      

    > Proof term: 
      μthesis:Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O)).<λEO:Even O.λOS:∀n:N.Even n⇒Odd (S n).λES:∀n:N.Odd n⇒Even (S n).μth:Even (S (S O)).<ES||S O*μth:Odd (S O).<OS||O*?1.1.1.1.2.1.1.2.1>*?1.1.1.1.2.1.2>||thesis>
      Natural language:
      we need to prove Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O))
        assume Even O (EO)
        assume ∀n:N.Even n⇒Odd (S n) (OS)
        assume ∀n:N.Odd n⇒Even (S n) (ES)
        we need to prove Even (S (S O))
          by ES
          and we need to prove Odd (S O)
            by OS
          ...(1.1.1.1.2.1.1.2.1) <======
        ...(1.1.1.1.2.1.2)
      done
      
      2 goals yet to prove!
      
      
      *:Even O⇒Odd (S O)
      ES:∀n:N.Odd n⇒Even (S n)
      OS:∀n:N.Even n⇒Odd (S n)
      EO:Even O
       |-----  1.1.1.1.2.1.1.2.1
      th:Odd (S O)
      

    > Closed a branch. 
      
      Proof term: 
      μthesis:Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O)).<λEO:Even O.λOS:∀n:N.Even n⇒Odd (S n).λES:∀n:N.Odd n⇒Even (S n).μth:Even (S (S O)).<ES||S O*μth:Odd (S O).<OS||O*EO*th>*?1.1.1.1.2.1.2>||thesis>
      Natural language:
      we need to prove Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O))
        assume Even O (EO)
        assume ∀n:N.Even n⇒Odd (S n) (OS)
        assume ∀n:N.Odd n⇒Even (S n) (ES)
        we need to prove Even (S (S O))
          by ES
          and we need to prove Odd (S O)
            by OS
            and by EO
          done
        ...(1.1.1.1.2.1.2) <======
      done
      
      1 goal yet to prove!
      
      
      *:Even (S (S O))
      ES:∀n:N.Odd n⇒Even (S n)
      OS:∀n:N.Even n⇒Odd (S n)
      EO:Even O
       |-----  1.1.1.1.2.1.2
      th:Even (S (S O))
      

    > Closed the last branch: 
      Proof completed!
      
      Proof term: 
      μthesis:Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O)).<λEO:Even O.λOS:∀n:N.Even n⇒Odd (S n).λES:∀n:N.Odd n⇒Even (S n).μth:Even (S (S O)).<ES||S O*μth:Odd (S O).<OS||O*EO*th>*th>||thesis>
      Natural language:
      we need to prove Even O⇒∀n:N.Even n⇒Odd (S n)⇒∀n:N.Odd n⇒Even (S n)⇒Even (S (S O))
        assume Even O (EO)
        assume ∀n:N.Even n⇒Odd (S n) (OS)
        assume ∀n:N.Odd n⇒Even (S n) (ES)
        we need to prove Even (S (S O))
          by ES
          and we need to prove Odd (S O)
            by OS
            and by EO
          done
        done
      done
      
      

    > even_2 defined.
      

    > Firing up Coq for confirmation.
      

    > Firing up Coq for confirmation.
      

    > File ./test_fo_1.nl written. Enjoy the reading.
      

    > EOF!

