# 3 "lexer.mll"
 
  open Lexing
  open Parser
   
  exception Lexing_error of string
    
  let kwd_tbl = [
    "lj", LJ;
    "lk", LK;
    "minimal", MIN;
    "full", FULL;
    "declare", DECLARE;
    "discard", DISCARD;
    "all", ALL;
    "next", NEXT;
    "prev", PREV;
    "theorem", THEOREM;
    "qed", QED;
    "checkout", ACK;
    "proof", PROOF;
    "term", TERM;
    "natural", NATURAL;
    "language", LANGUAGE;
    "coq", COQ;
    "pvs", PVS;
    "isabelle", ISABELLE;
    "help", HELP;
    "undo", UNDO;
    "quit", QUIT;
    "axiom", AXIOM;
    "cut", CUT;
    "elim", ELIM;
    "idtac", IDTAC;
    "focus", FOCUS;
    "in", IN;
    "contraction", CONTRACTION;
    "tacticals", TACTICALS;
    "bool",PROP;
    "type",SET;
    "forall", FORALL;
    "exists", EXISTS;
    "true", TRUE;
    "false", FALSE;
    "left", LEFT;
    "right", RIGHT]
  let id_or_kwd s =  try List.assoc s kwd_tbl with _ -> IDENT(s) 

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <- 
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }

# 55 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\237\255\236\255\255\255\002\000\079\000\251\255\250\255\
    \249\255\248\255\247\255\000\000\002\000\001\000\000\000\241\255\
    \240\255\239\255\238\255\007\000\009\000\010\000\243\255\244\255\
    \246\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\002\000\003\000\255\255\255\255\
    \255\255\255\255\255\255\010\000\019\000\019\000\013\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\001\000\255\255\255\255\
    \255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\019\000\019\000\019\000\000\000\000\000\
    \000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\003\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
    \014\000\015\000\019\000\000\000\007\000\011\000\006\000\012\000\
    \022\000\020\000\021\000\020\000\020\000\000\000\000\000\000\000\
    \000\000\000\000\009\000\008\000\000\000\000\000\024\000\000\000\
    \000\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\016\000\013\000\017\000\023\000\000\000\
    \000\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\000\000\018\000\000\000\010\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\000\000\000\000\000\000\000\000\005\000\000\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\004\000\255\255\255\255\255\255\255\255\
    \255\255\019\000\255\255\020\000\021\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\004\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\014\000\255\255\000\000\000\000\000\000\000\000\
    \013\000\019\000\020\000\020\000\021\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\011\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\012\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\000\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\255\255\255\255\255\255\255\255\005\000\255\255\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\019\000\
    \255\255\020\000\021\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec nexttoken lexbuf =
    __ocaml_lex_nexttoken_rec lexbuf 0
and __ocaml_lex_nexttoken_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 64 "lexer.mll"
            ( Format.printf "fsp < @?" ; newline lexbuf; nexttoken lexbuf )
# 181 "lexer.ml"

  | 1 ->
# 65 "lexer.mll"
                     ( nexttoken lexbuf )
# 186 "lexer.ml"

  | 2 ->
# 66 "lexer.mll"
            ( nexttoken lexbuf )
# 191 "lexer.ml"

  | 3 ->
# 67 "lexer.mll"
            ( id_or_kwd (lexeme lexbuf) )
# 196 "lexer.ml"

  | 4 ->
# 68 "lexer.mll"
            ( DOT )
# 201 "lexer.ml"

  | 5 ->
# 69 "lexer.mll"
            ( VIR )
# 206 "lexer.ml"

  | 6 ->
# 70 "lexer.mll"
            ( PVIR )
# 211 "lexer.ml"

  | 7 ->
# 71 "lexer.mll"
            ( COLON )
# 216 "lexer.ml"

  | 8 ->
# 72 "lexer.mll"
            ( NEG )
# 221 "lexer.ml"

  | 9 ->
# 73 "lexer.mll"
            ( ARROW )
# 226 "lexer.ml"

  | 10 ->
# 74 "lexer.mll"
            ( MINUS )
# 231 "lexer.ml"

  | 11 ->
# 75 "lexer.mll"
            ( AND )
# 236 "lexer.ml"

  | 12 ->
# 76 "lexer.mll"
            ( OR )
# 241 "lexer.ml"

  | 13 ->
# 77 "lexer.mll"
            ( LPAR )
# 246 "lexer.ml"

  | 14 ->
# 78 "lexer.mll"
            ( RPAR )
# 251 "lexer.ml"

  | 15 ->
# 79 "lexer.mll"
            ( LBRA )
# 256 "lexer.ml"

  | 16 ->
# 80 "lexer.mll"
            ( RBRA )
# 261 "lexer.ml"

  | 17 ->
# 81 "lexer.mll"
            ( PIPE )
# 266 "lexer.ml"

  | 18 ->
# 82 "lexer.mll"
            ( EOF )
# 271 "lexer.ml"

  | 19 ->
# 83 "lexer.mll"
            ( raise (Lexing_error (lexeme lexbuf)) )
# 276 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_nexttoken_rec lexbuf __ocaml_lex_state

;;

